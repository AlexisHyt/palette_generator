import matplotlib.pyplot as plt
import numpy as np


def visualize_loss(array, title="Graph"):
    """
    Visualize loss curves.

    :param array: Losses values
    :param title: Title of the graph
    """
    # Sample array of numbers
    data = np.array(array)

    # Create x-axis values (optional, for line plots)
    x = np.arange(len(data))

    # Create the plot
    plt.plot(x, data)

    # Customize the plot (optional)
    plt.title(title)
    plt.xlabel("Index")
    plt.ylabel("Value")
    plt.grid(True)

    # Show the plot
    plt.show()


def visualize_palettes(generated_palettes, palette_number=1):
    """
    Visualize palettes generated by the generator.
    Each palette is shown as a horizontal strip of color swatches.

    :param generated_palettes: Generated palettes
    :param palette_number: Number of palettes to visualize
    """
    # Create a figure and axes
    fig, ax = plt.subplots()

    # Define the width and height of each rectangle
    rect_width = 0.8
    rect_height = 0.8

    # Offset for positioning multiple palettes vertically
    y_offset = 0

    for palette in generated_palettes[:palette_number]:  # Limit to specified number
        # Reshape the palette for easier iteration
        palette = palette.reshape(5, 3)

        # Calculate center positions for rectangles in this palette
        x_centers = np.arange(len(palette))
        y_centers = np.ones(len(palette)) * y_offset  # Use y_offset for vertical placement

        # Create rectangles and add them to the plot
        for i, color in enumerate(palette):
            rect = plt.Rectangle(
                (x_centers[i] - rect_width / 2, y_centers[i] - rect_height / 2),
                rect_width, rect_height,
                facecolor=color,
                edgecolor='black'  # Optional: Add black borders
            )
            ax.add_patch(rect)

        # Update y_offset for the next palette
        y_offset -= rect_height + 0.2  # Add spacing between palettes

    # Adjust plot limits to encompass all palettes
    # Calculate the maximum x and y extents based on rectangle positions
    max_x = x_centers[-1] + rect_width / 2 + 0.5
    min_y = y_offset - rect_height / 2 - 0.5

    ax.set_xlim(0 - rect_width / 2 - 0.5, max_x)
    ax.set_ylim(min_y, 1 + rect_height / 2)

    # Remove axis ticks and labels
    ax.set_xticks([])
    ax.set_yticks([])

    # Show the plot
    plt.show()